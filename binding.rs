/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoolStruct {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CoolStruct() {
    assert_eq!(
        ::std::mem::size_of::<CoolStruct>(),
        8usize,
        concat!("Size of: ", stringify!(CoolStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<CoolStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(CoolStruct))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CoolStruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CoolStruct),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CoolStruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(CoolStruct),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}

#[link(name = "cool", kind = "static")]
extern "C" {
    pub fn cool_function(i: ::std::os::raw::c_int, c: ::std::os::raw::c_char, cs: *mut CoolStruct)->::std::os::raw::c_int;
}

fn main()  
{
    let mut cool_struct = CoolStruct{x:5, y:6};
    let cs: *mut CoolStruct = &mut cool_struct;

    unsafe {
	    let _ret = cool_function(3, 65, cs);
	    println!("{_ret}");
    }
}